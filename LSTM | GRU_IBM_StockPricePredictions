#imports
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional
from tensorflow.keras.optimizers import SGD
import math
from sklearn.metrics import mean_squared_error
#plotting test&predictions
def plot_predictions(test,predicted):
    plt.plot(test, color='red',label='Real IBM Stock Price')
    plt.plot(predicted, color='blue',label='Predicted IBM Stock Price')
    plt.title('IBM Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('IBM Stock Price')
    plt.legend()
    plt.show()

def return_rmse(test,predicted):
    rmse = math.sqrt(mean_squared_error(test, predicted))
    print("The root mean squared error is {}.".format(rmse))

#get data

dataset = pd.read_csv('IBM_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])
print(dataset.head())
#check missing values
training_set = dataset[:'2016'].iloc[:,1:2].values
test_set = dataset['2017':].iloc[:,1:2].values
#choose high attribute for price
dataset["High"][:'2016'].plot(figsize=(12,2),legend=True)
dataset["High"]['2017':].plot(figsize=(12,2),legend=True)
plt.legend(['Training set(Before 2017)','Test set (2017 and After '])
plt.title("IBM STOCK PRICE")
#plt.show()
#scaling the Training set
sc=MinMaxScaler(feature_range=(0,1))
training_set_scaled=sc.fit_transform(training_set)

X_train = []
y_train = []
#create a data structure with 60 timesteps and 1 output
for i in range(60,2769):
    X_train.append(training_set_scaled[i-60:i,0])
    y_train.append(training_set_scaled[i,0])
X_train, y_train = np.array(X_train), np.array(y_train)
#reshape X_train
X_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1))

# The LSTM architecture
regressorLSTM = Sequential()
# First LSTM layer with Dropout regularisation
regressorLSTM .add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))
regressorLSTM .add(Dropout(0.2))
# Second LSTM layer
regressorLSTM .add(LSTM(units=50, return_sequences=True))
regressorLSTM .add(Dropout(0.2))
# Third LSTM layer
regressorLSTM .add(LSTM(units=50, return_sequences=True))
regressorLSTM .add(Dropout(0.2))
# Fourth LSTM layer
regressorLSTM .add(LSTM(units=50))
regressorLSTM .add(Dropout(0.2))
# The output layer
regressorLSTM .add(Dense(units=1))

# Compiling the RNN
regressorLSTM .compile(optimizer='rmsprop',loss='mean_squared_error')
# Fitting to the training set
regressorLSTM .fit(X_train,y_train,epochs=50,batch_size=32)
#'High' attribute data for processing

dataset_total = pd.concat((dataset["High"][:'2016'],dataset["High"]['2017':]),axis=0)
inputs = dataset_total[len(dataset_total)-len(test_set) - 60:].values
inputs = inputs.reshape(-1,1)
inputs  = sc.transform(inputs)

#preprocessing test data(X_test) and do predicictions
X_test = []
for i in range(60,311):
    X_test.append(inputs[i-60:i,0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))
predicted_stock_price = regressorLSTM .predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
#plotting results
plot_predictions(test_set,predicted_stock_price)
#LSTM model evaluation
return_rmse(test_set,predicted_stock_price)

print("GRU ARCHITECTURE ")
# The GRU architecture
regressorGRU = Sequential()
# First GRU layer with Dropout regularisation
regressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1), activation='tanh'))
regressorGRU.add(Dropout(0.2))
# Second GRU layer
regressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1), activation='tanh'))
regressorGRU.add(Dropout(0.2))
# Third GRU layer
regressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1), activation='tanh'))
regressorGRU.add(Dropout(0.2))
regressorGRU.add(GRU(units=50, activation='tanh'))
regressorGRU.add(Dropout(0.2))
# The output layer
regressorGRU.add(Dense(units=1))
# Compiling the RNN
regressorGRU.compile(optimizer=SGD(lr=0.01, decay=1e-7, momentum=0.9, nesterov=False),loss='mean_squared_error')
# Fitting to the training set
regressorGRU.fit(X_train,y_train,epochs=50,batch_size=150)
#test data preprocessing and predictions
X_test = []
for i in range(60,311):
    X_test.append(inputs[i-60:i,0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))
GRU_predicted_stock_price = regressorGRU.predict(X_test)
GRU_predicted_stock_price = sc.inverse_transform(GRU_predicted_stock_price)
#plotting results
plot_predictions(test_set,GRU_predicted_stock_price)
#GRU evaluation
return_rmse(test_set,GRU_predicted_stock_price)
